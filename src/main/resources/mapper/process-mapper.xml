<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.production.mapper.ProcessMapper">

<!-- 당일 생산지시 조회 -->
	<select id="getTodayIns" resultType="ProdInsVO">
		SELECT instruct_date
         , prod_instruct_code
         , prod_instruct_status
         , prod_plan_code
         , users_code
    FROM prod_instruct
    WHERE instruct_date = TRUNC(SYSDATE)
	</select>
	<select id="getTodayInsDetail" resultType="ProdInsDeVO">
		SELECT prod_instruct_detail_code
         , pld.product_code
         , p.product_name
         , instruct_cnt
         , not_prod_cnt
         , prod_cnt
         , prod_instruct_code
    FROM prod_instruct_detail pid JOIN prod_plan_detail pld
                                    ON pid.prod_plan_detail_code = pld.prod_plan_detail_code
                                  JOIN product p
                                    ON pld.product_code = p.product_code
    WHERE prod_instruct_code = #{prodInstructCode}
    ORDER BY prod_instruct_detail_code
	</select>
	
<!-- 공정진행 조회 -->
  <select id="getProcessInfo" resultType="ProcessVO" parameterType="String">
    SELECT pr.serial_num 
      , pr.proc_name
      , pr.eqm_code 
      , pd.proc_detail_code
      , pd.proc_code
      , pd.begin_time
      , pd.end_time
      , pd.proc_status
      , pd.users_code
      , pd.prod_instruct_detail_code
    FROM proc_detail pd JOIN proc pr
                         ON pd.proc_code = pr.proc_code
    WHERE pd.prod_instruct_detail_code = #{prodInstructDetailCode}
  </select>
<!-- 공정자재 조회 -->  
  <select id="getProcMatInfo" resultType="ProcessVO" parameterType="String">
	  SELECT proc_mat_code
	       , proc_detail_code
	       , mat_lot_code
	       , mat_cnt
	  FROM proc_mat
	  WHERE proc_detail_code = #{procDetailCode}
  </select>

<!-- 공정 (*프로시저 사용) -->
	<insert id="updateProc" parameterType="ProcessVO" statementType="CALLABLE">
		{ CALL PROC_UPDATE(#{prodInstructCode}, #{prodInstructDetailCode}, #{usersCode}, #{procDetailCode}, #{se}, #{eqmCode}, #{result, mode=OUT, jdbcType=VARCHAR, javaType=string}) }
	</insert>
<!-- 	<update id="updateBeginTime" parameterType="ProcessVO" >
		UPDATE proc_detail
		SET    begin_time = SYSDATE
		     , proc_status = 'CS2'
		     , users_code = #{usersCode}
		WHERE proc_detail_code = #{procDetailCode}
	</update> -->
<!-- 공정 종료 -->
	<!-- <update id="updateEndTime" parameterType="ProcessVO" >
		UPDATE proc_detail
		SET    end_time = SYSDATE
		     , proc_status = 'CS3'
		WHERE proc_detail_code = #{procDetailCode}
	</update> -->
<!-- 설비상태 변경 -->
<!-- 	<update id="updateOprStatus" parameterType="ProcessVO">
		UPDATE eqm
		SET opr_status = #{oprStatus}
		WHERE eqm_code = #{eqmCode}
	</update> -->
	
<!-- 공정에 사용되는 설비상태 & 가동현황 -->
  <select id="getProcEqmInfo" resultType="ProcessVO">
    SELECT p.proc_code
         , p.serial_num
         , p.eqm_code
         , eqm_name
         , opr_status
         , eqm_status
    FROM eqm e JOIN proc p
                ON e.eqm_code = p.eqm_code
    WHERE eqm_status != 'ES5'
    ORDER BY p.serial_num
  </select>
<!-- 설비명으로 조회 --> 
  <select id="getEqmAllInfo" resultType="ProcessVO" parameterType="String">
	SELECT eqm_code
		 , eqm_name
		 , eqm_status
		 , opr_status
	FROM eqm
	WHERE eqm_name LIKE REGEXP_REPLACE(#{eqmName}, '[0-9]+', '') || '%'
	AND eqm_status != 'ES5'
	<!-- AND NOT eqm_code = #{eqmCode} -->
	ORDER BY eqm_code
  </select>

<!-- 공정에 사용되는 설비 변경 -->
	<update id="updateProcEqm" parameterType="ProcessVO">
		UPDATE proc
		SET eqm_code = #{eqmCode}
		WHERE proc_code = #{procCode}
	</update>


</mapper>